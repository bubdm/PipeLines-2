// <auto-generated />
using PipeLines.Model.PipeItemModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PipeLines.Model
{
    /// <summary>
    /// GameLevel class contains different table configurations. PipeItem objects are created here in a 2 dimensional array, with starting x and y coordinates.
    /// </summary>
    class GameLevel
    {
        private int gridCount;   
        private LevelNumber lvlNumber; 
        private PipeItem[,] itemMap;

        private int pipeElementCount; //only useful elements count, empty/start/finish doesn't

        public int PipeElementCount
        {
            get { return pipeElementCount; }
            set { pipeElementCount = value; }
        }

        public int GridCount
        {
            get { return gridCount; }
            set { gridCount = value; }
        }
        public PipeItem[,] ItemMap
        {
            get { return itemMap; }
            set { itemMap = value; }
        }

        public LevelNumber LvlNumber
        {
            get { return lvlNumber; }
            set { lvlNumber = value; }
        }

        public GameLevel(LevelNumber level)
        {
            //example level
            if(level==LevelNumber.lvl_1)
            {
                this.gridCount = 5;
                this.pipeElementCount = 5;
                itemMap = new PipeItem[gridCount, gridCount];
                itemMap[3, 3] = new BottomToRightPipe(3, 3);
                itemMap[2, 4] = new TShapeBottomPipe(4, 2);
                itemMap[0, 0] = new HorizontalPipe(0, 0);
                itemMap[1, 3] = new HorizontalPipe(3, 1);
                itemMap[2, 2] = new HorizontalPipe(2, 2);
                itemMap[0, 2] = new EmptyItem(2, 0);
                itemMap[4, 0] = new StartPipe(0, 4);
                itemMap[4, 3] = new FinishPipe(3, 4);
            }
            else if(level==LevelNumber.lvl_2)
            {
                this.gridCount = 5;
                this.pipeElementCount = 5;
                itemMap = new PipeItem[gridCount, gridCount];
                itemMap[1, 1] = new BottomToRightPipe(1, 1);
                itemMap[3, 1] = new TShapeBottomPipe(1, 3);
                itemMap[0, 0] = new HorizontalPipe(0, 0);
                itemMap[3, 3] = new HorizontalPipe(3, 3);
                itemMap[2, 2] = new HorizontalPipe(2, 2);
                itemMap[3, 2] = new EmptyItem(2, 3);
                itemMap[4, 0] = new StartPipe(0, 4);
                itemMap[4, 3] = new FinishPipe(3, 4);
                itemMap[3, 0] = new EmptyItem(0, 3);
                itemMap[2, 1] = new EmptyItem(1, 2);
                itemMap[2, 3] = new EmptyItem(3, 2);
                itemMap[4, 2] = new EmptyItem(2, 4);
                itemMap[0, 4] = new EmptyItem(4, 0);
                itemMap[1, 3] = new EmptyItem(3, 1);
                itemMap[0, 3] = new EmptyItem(3, 0);
            }
            else if(level==LevelNumber.lvl_3)
            {
                this.gridCount = 5;
                this.pipeElementCount = 8;
                itemMap = new PipeItem[gridCount, gridCount];
                itemMap[1, 1] = new BottomToRightPipe(1, 1);
                itemMap[3, 1] = new TShapeBottomPipe(1, 3);
                itemMap[0, 0] = new HorizontalPipe(0, 0);
                itemMap[3, 3] = new HorizontalPipe(3, 3);
                itemMap[2, 2] = new LeftToBottomPipe(2, 2);
                itemMap[4, 0] = new StartPipe(0, 4);
                itemMap[4, 3] = new FinishPipe(3, 4);
                itemMap[2, 1] = new VerticalPipe(1, 2);
                itemMap[0, 4] = new VerticalPipe(4, 0);
                itemMap[0, 3] = new TopToRight(3, 0);
            }
            else if(level==LevelNumber.lvl_4)
            {
                this.gridCount = 5;
                this.pipeElementCount = 11;
                itemMap = new PipeItem[gridCount, gridCount];
                itemMap[3, 3] = new BottomToRightPipe(3, 3);
                itemMap[2, 4] = new TShapeBottomPipe(4, 2);
                itemMap[0, 0] = new LeftToBottomPipe(0, 0);
                itemMap[1, 3] = new HorizontalPipe(3, 1);
                itemMap[2, 2] = new HorizontalPipe(2, 2);
                itemMap[0, 2] = new VerticalPipe(2, 0);
                itemMap[1, 1] = new VerticalPipe(1, 1);
                itemMap[2, 3] = new VerticalPipe(3, 2);
                itemMap[3, 0] = new VerticalPipe(0, 3);
                itemMap[2, 0] = new VerticalPipe(0, 2);
                itemMap[3, 2] = new TopToRight(2, 3);
                itemMap[4, 0] = new StartPipe(0, 4);
                itemMap[4, 3] = new FinishPipe(3, 4);
            }
            else if (level == LevelNumber.lvl_5)
            {
                this.gridCount = 5;
                this.pipeElementCount = 12;
                itemMap = new PipeItem[gridCount, gridCount];
                itemMap[2, 0] = new TopToRight(0, 2);
                itemMap[4, 1] = new VerticalPipe(1, 4);
                itemMap[1, 3] = new LeftToTopPipe(3, 1);
                itemMap[2, 4] = new TShapeBottomPipe(4, 2);
                itemMap[2, 3] = new HorizontalPipe(3, 2);
                itemMap[3, 0] = new BottomToRightPipe(0, 3);
                itemMap[1, 1] = new LeftToBottomPipe(1, 1);
                itemMap[4, 3] = new FinishPipe(3, 4);
                itemMap[0, 2] = new BottomToRightPipe(2, 0);
                itemMap[0, 4] = new LeftToBottomPipe(4, 0);
                itemMap[1, 4] = new VerticalPipe(4, 1);
                itemMap[4, 0] = new StartPipe(0, 4);
                itemMap[3, 4] = new VerticalPipe(4, 3);
                itemMap[0, 3] = new TopToRight(3, 0);
            }
            else if (level == LevelNumber.lvl_6)
            {
                this.gridCount = 5;
                this.pipeElementCount = 11;
                itemMap = new PipeItem[gridCount, gridCount];
                itemMap[2, 0] = new BottomToRightPipe(0, 2);
                itemMap[4, 1] = new LeftToTopPipe(1, 4);
                itemMap[1, 3] = new LeftToBottomPipe(3, 1);
                itemMap[2, 4] = new TopToRight (4, 2);
                itemMap[2, 3] = new BottomToRightPipe(3, 2);
                itemMap[3, 0] = new HorizontalPipe(0, 3);
                itemMap[1, 1] = new LeftToBottomPipe(1, 1);
                itemMap[4, 3] = new FinishPipe(3, 4);
                itemMap[0, 2] = new VerticalPipe(2, 0);
                itemMap[0, 4] = new TopToRight(4, 0);
                itemMap[1, 4] = new TShapeBottomPipe(4, 1);
                itemMap[4, 0] = new StartPipe(0, 4);
                itemMap[3, 4] = new HorizontalPipe(4, 3);
                itemMap[2, 2] = new EmptyItem(2, 2);
                itemMap[0, 3] = new EmptyItem(3, 0);

            }
            else if (level == LevelNumber.lvl_7)
            {
                this.gridCount = 5;
                this.pipeElementCount = 13;
                itemMap = new PipeItem[gridCount, gridCount];
                itemMap[2, 0] = new VerticalPipe(0, 2);
                itemMap[4, 1] = new VerticalPipe(1, 4);
                itemMap[1, 3] = new BottomToRightPipe(3, 1);
                itemMap[2, 4] = new HorizontalPipe(4, 2);
                itemMap[2, 3] = new HorizontalPipe(3, 2);
                itemMap[3, 0] = new HorizontalPipe(0, 3);
                itemMap[1, 1] = new LeftToBottomPipe(1, 1);
                itemMap[4, 3] = new FinishPipe(3, 4);
                itemMap[0, 2] = new LeftToTopPipe(2, 0);
                itemMap[0, 4] = new HorizontalPipe(4, 0);
                itemMap[1, 4] = new BottomToRightPipe(4, 1);
                itemMap[4, 0] = new StartPipe(0, 4);
                itemMap[3, 4] = new TopToRight(4, 3);
                itemMap[2, 2] = new TShapeBottomPipe(2, 2);
                itemMap[0, 3] = new HorizontalPipe(3, 0);
                itemMap[1, 0] = new EmptyItem(0, 1);
                itemMap[1, 2] = new EmptyItem(2, 1);
                itemMap[3, 1] = new EmptyItem(1, 3);

            }
            else if (level == LevelNumber.lvl_8)
            {
                this.gridCount = 5;
                this.pipeElementCount = 8;
                itemMap = new PipeItem[gridCount, gridCount];
                itemMap[1, 1] = new BottomToRightPipe(1, 1);
                itemMap[3, 1] = new TShapeBottomPipe(1, 3);
                itemMap[0, 0] = new HorizontalPipe(0, 0);
                itemMap[3, 3] = new HorizontalPipe(3, 3);
                itemMap[2, 2] = new LeftToBottomPipe(2, 2);
                itemMap[4, 0] = new StartPipe(0, 4);
                itemMap[4, 3] = new FinishPipe(3, 4);
                itemMap[2, 1] = new VerticalPipe(1, 2);
                itemMap[0, 4] = new VerticalPipe(4, 0);
                itemMap[0, 3] = new TopToRight(3, 0);
                itemMap[1, 0] = new EmptyItem(0, 1);
                itemMap[1, 2] = new EmptyItem(2, 1);
                itemMap[0, 1] = new EmptyItem(1, 0);
                itemMap[0, 2] = new EmptyItem(2, 0);
                itemMap[1, 3] = new EmptyItem(3, 1);
                itemMap[2, 0] = new EmptyItem(0, 2);
                itemMap[2, 3] = new EmptyItem(3, 2);
                itemMap[2, 4] = new EmptyItem(4, 2);
                itemMap[3, 0] = new EmptyItem(0, 3);

                itemMap[3, 2] = new EmptyItem(2, 3);
                itemMap[3, 4] = new EmptyItem(4, 3);
            }
            else if (level == LevelNumber.lvl_9)
            {
                this.gridCount = 5;
                this.pipeElementCount = 16;
                itemMap = new PipeItem[gridCount, gridCount];
                itemMap[2, 0] = new BottomToRightPipe(0, 2);
                itemMap[4, 1] = new LeftToTopPipe(1, 4);
                itemMap[1, 3] = new LeftToBottomPipe(3, 1);
                itemMap[2, 4] = new TopToRight(4, 2);
                itemMap[2, 3] = new BottomToRightPipe(3, 2);
                itemMap[3, 0] = new HorizontalPipe(0, 3);
                itemMap[1, 1] = new TShapeTopPipe(1, 1);
                itemMap[4, 3] = new FinishPipe(3, 4);
                itemMap[0, 2] = new BottomToRightPipe(2, 0);
                itemMap[0, 4] = new HorizontalPipe(4, 0);
                itemMap[1, 4] = new LeftToBottomPipe(4, 1);
                itemMap[4, 0] = new StartPipe(0, 4);
                itemMap[3, 4] = new VerticalPipe(4, 3);
                itemMap[2, 2] = new VerticalPipe(2, 2);
                itemMap[0, 3] = new LeftToBottomPipe(3, 0);
                itemMap[1, 0] = new VerticalPipe(0, 1);
                itemMap[1, 2] = new VerticalPipe(2, 1);
                itemMap[3, 1] = new TopToRight(1, 3);

            }


        }

    }

    public enum LevelNumber
    {
        lvl_1,
        lvl_2,
        lvl_3,
        lvl_4,
        lvl_5,
        lvl_6,
        lvl_7,
        lvl_8,
        lvl_9
    }
}
